// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: compiler/ir/serialization.jvm/src/JvmIr.proto

package org.jetbrains.kotlin.backend.jvm.serialization.proto;

public final class JvmIr {
  private JvmIr() {}
  public static void registerAllExtensions(
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite registry) {
  }
  public interface XStatementOrExpressionOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.backend.jvm.serialization.proto.XStatementOrExpression)
      org.jetbrains.kotlin.protobuf.MessageLiteOrBuilder {

    /**
     * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement statement = 1;</code>
     */
    boolean hasStatement();
    /**
     * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement statement = 1;</code>
     */
    org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement getStatement();

    /**
     * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression expression = 2;</code>
     */
    boolean hasExpression();
    /**
     * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression expression = 2;</code>
     */
    org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression getExpression();
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.backend.jvm.serialization.proto.XStatementOrExpression}
   */
  public static final class XStatementOrExpression extends
      org.jetbrains.kotlin.protobuf.GeneratedMessageLite implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.backend.jvm.serialization.proto.XStatementOrExpression)
      XStatementOrExpressionOrBuilder {
    // Use XStatementOrExpression.newBuilder() to construct.
    private XStatementOrExpression(org.jetbrains.kotlin.protobuf.GeneratedMessageLite.Builder builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private XStatementOrExpression(boolean noInit) { this.unknownFields = org.jetbrains.kotlin.protobuf.ByteString.EMPTY;}

    private static final XStatementOrExpression defaultInstance;
    public static XStatementOrExpression getDefaultInstance() {
      return defaultInstance;
    }

    public XStatementOrExpression getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final org.jetbrains.kotlin.protobuf.ByteString unknownFields;
    private XStatementOrExpression(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      org.jetbrains.kotlin.protobuf.ByteString.Output unknownFieldsOutput =
          org.jetbrains.kotlin.protobuf.ByteString.newOutput();
      org.jetbrains.kotlin.protobuf.CodedOutputStream unknownFieldsCodedOutput =
          org.jetbrains.kotlin.protobuf.CodedOutputStream.newInstance(
              unknownFieldsOutput, 1);
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFieldsCodedOutput,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement.Builder subBuilder = null;
              if (kindCase_ == 1) {
                subBuilder = ((org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement) kind_).toBuilder();
              }
              kind_ = input.readMessage(org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement) kind_);
                kind_ = subBuilder.buildPartial();
              }
              kindCase_ = 1;
              break;
            }
            case 18: {
              org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression.Builder subBuilder = null;
              if (kindCase_ == 2) {
                subBuilder = ((org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression) kind_).toBuilder();
              }
              kind_ = input.readMessage(org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression) kind_);
                kind_ = subBuilder.buildPartial();
              }
              kindCase_ = 2;
              break;
            }
          }
        }
      } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        try {
          unknownFieldsCodedOutput.flush();
        } catch (java.io.IOException e) {
        // Should not happen
        } finally {
          unknownFields = unknownFieldsOutput.toByteString();
        }
        makeExtensionsImmutable();
      }
    }
    public static org.jetbrains.kotlin.protobuf.Parser<XStatementOrExpression> PARSER =
        new org.jetbrains.kotlin.protobuf.AbstractParser<XStatementOrExpression>() {
      public XStatementOrExpression parsePartialFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        return new XStatementOrExpression(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public org.jetbrains.kotlin.protobuf.Parser<XStatementOrExpression> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    private int kindCase_ = 0;
    private java.lang.Object kind_;
    public enum KindCase
        implements org.jetbrains.kotlin.protobuf.Internal.EnumLite {
      STATEMENT(1),
      EXPRESSION(2),
      KIND_NOT_SET(0);
      private int value = 0;
      private KindCase(int value) {
        this.value = value;
      }
      public static KindCase valueOf(int value) {
        switch (value) {
          case 1: return STATEMENT;
          case 2: return EXPRESSION;
          case 0: return KIND_NOT_SET;
          default: throw new java.lang.IllegalArgumentException(
            "Value is undefined for this oneof enum.");
        }
      }
      public int getNumber() {
        return this.value;
      }
    };

    public KindCase
    getKindCase() {
      return KindCase.valueOf(
          kindCase_);
    }

    public static final int STATEMENT_FIELD_NUMBER = 1;
    /**
     * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement statement = 1;</code>
     */
    public boolean hasStatement() {
      return kindCase_ == 1;
    }
    /**
     * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement statement = 1;</code>
     */
    public org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement getStatement() {
      if (kindCase_ == 1) {
         return (org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement) kind_;
      }
      return org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement.getDefaultInstance();
    }

    public static final int EXPRESSION_FIELD_NUMBER = 2;
    /**
     * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression expression = 2;</code>
     */
    public boolean hasExpression() {
      return kindCase_ == 2;
    }
    /**
     * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression expression = 2;</code>
     */
    public org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression getExpression() {
      if (kindCase_ == 2) {
         return (org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression) kind_;
      }
      return org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression.getDefaultInstance();
    }

    private void initFields() {
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (hasStatement()) {
        if (!getStatement().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasExpression()) {
        if (!getExpression().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(org.jetbrains.kotlin.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (kindCase_ == 1) {
        output.writeMessage(1, (org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement) kind_);
      }
      if (kindCase_ == 2) {
        output.writeMessage(2, (org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression) kind_);
      }
      output.writeRawBytes(unknownFields);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (kindCase_ == 1) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(1, (org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement) kind_);
      }
      if (kindCase_ == 2) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(2, (org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression) kind_);
      }
      size += unknownFields.size();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.XStatementOrExpression parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.XStatementOrExpression parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.XStatementOrExpression parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.XStatementOrExpression parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.XStatementOrExpression parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.XStatementOrExpression parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.XStatementOrExpression parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.XStatementOrExpression parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.XStatementOrExpression parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.XStatementOrExpression parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.XStatementOrExpression prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    /**
     * Protobuf type {@code org.jetbrains.kotlin.backend.jvm.serialization.proto.XStatementOrExpression}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessageLite.Builder<
          org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.XStatementOrExpression, Builder>
        implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.backend.jvm.serialization.proto.XStatementOrExpression)
        org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.XStatementOrExpressionOrBuilder {
      // Construct using org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.XStatementOrExpression.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private void maybeForceBuilderInitialization() {
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        kindCase_ = 0;
        kind_ = null;
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.XStatementOrExpression getDefaultInstanceForType() {
        return org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.XStatementOrExpression.getDefaultInstance();
      }

      public org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.XStatementOrExpression build() {
        org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.XStatementOrExpression result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.XStatementOrExpression buildPartial() {
        org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.XStatementOrExpression result = new org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.XStatementOrExpression(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (kindCase_ == 1) {
          result.kind_ = kind_;
        }
        if (kindCase_ == 2) {
          result.kind_ = kind_;
        }
        result.bitField0_ = to_bitField0_;
        result.kindCase_ = kindCase_;
        return result;
      }

      public Builder mergeFrom(org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.XStatementOrExpression other) {
        if (other == org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.XStatementOrExpression.getDefaultInstance()) return this;
        switch (other.getKindCase()) {
          case STATEMENT: {
            mergeStatement(other.getStatement());
            break;
          }
          case EXPRESSION: {
            mergeExpression(other.getExpression());
            break;
          }
          case KIND_NOT_SET: {
            break;
          }
        }
        setUnknownFields(
            getUnknownFields().concat(other.unknownFields));
        return this;
      }

      public final boolean isInitialized() {
        if (hasStatement()) {
          if (!getStatement().isInitialized()) {
            
            return false;
          }
        }
        if (hasExpression()) {
          if (!getExpression().isInitialized()) {
            
            return false;
          }
        }
        return true;
      }

      public Builder mergeFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.XStatementOrExpression parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.XStatementOrExpression) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int kindCase_ = 0;
      private java.lang.Object kind_;
      public KindCase
          getKindCase() {
        return KindCase.valueOf(
            kindCase_);
      }

      public Builder clearKind() {
        kindCase_ = 0;
        kind_ = null;
        return this;
      }

      private int bitField0_;

      /**
       * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement statement = 1;</code>
       */
      public boolean hasStatement() {
        return kindCase_ == 1;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement statement = 1;</code>
       */
      public org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement getStatement() {
        if (kindCase_ == 1) {
          return (org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement) kind_;
        }
        return org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement.getDefaultInstance();
      }
      /**
       * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement statement = 1;</code>
       */
      public Builder setStatement(org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement value) {
        if (value == null) {
          throw new NullPointerException();
        }
        kind_ = value;

        kindCase_ = 1;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement statement = 1;</code>
       */
      public Builder setStatement(
          org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement.Builder builderForValue) {
        kind_ = builderForValue.build();

        kindCase_ = 1;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement statement = 1;</code>
       */
      public Builder mergeStatement(org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement value) {
        if (kindCase_ == 1 &&
            kind_ != org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement.getDefaultInstance()) {
          kind_ = org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement.newBuilder((org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement) kind_)
              .mergeFrom(value).buildPartial();
        } else {
          kind_ = value;
        }

        kindCase_ = 1;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement statement = 1;</code>
       */
      public Builder clearStatement() {
        if (kindCase_ == 1) {
          kindCase_ = 0;
          kind_ = null;
          
        }
        return this;
      }

      /**
       * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression expression = 2;</code>
       */
      public boolean hasExpression() {
        return kindCase_ == 2;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression expression = 2;</code>
       */
      public org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression getExpression() {
        if (kindCase_ == 2) {
          return (org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression) kind_;
        }
        return org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression.getDefaultInstance();
      }
      /**
       * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression expression = 2;</code>
       */
      public Builder setExpression(org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression value) {
        if (value == null) {
          throw new NullPointerException();
        }
        kind_ = value;

        kindCase_ = 2;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression expression = 2;</code>
       */
      public Builder setExpression(
          org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression.Builder builderForValue) {
        kind_ = builderForValue.build();

        kindCase_ = 2;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression expression = 2;</code>
       */
      public Builder mergeExpression(org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression value) {
        if (kindCase_ == 2 &&
            kind_ != org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression.getDefaultInstance()) {
          kind_ = org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression.newBuilder((org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression) kind_)
              .mergeFrom(value).buildPartial();
        } else {
          kind_ = value;
        }

        kindCase_ = 2;
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression expression = 2;</code>
       */
      public Builder clearExpression() {
        if (kindCase_ == 2) {
          kindCase_ = 0;
          kind_ = null;
          
        }
        return this;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.backend.jvm.serialization.proto.XStatementOrExpression)
    }

    static {
      defaultInstance = new XStatementOrExpression(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.backend.jvm.serialization.proto.XStatementOrExpression)
  }

  public interface AuxTablesOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.backend.jvm.serialization.proto.AuxTables)
      org.jetbrains.kotlin.protobuf.MessageLiteOrBuilder {

    /**
     * <code>repeated bytes type = 1;</code>
     *
     * <pre>
     * TODO: optimize the representation.
     * </pre>
     */
    java.util.List<org.jetbrains.kotlin.protobuf.ByteString> getTypeList();
    /**
     * <code>repeated bytes type = 1;</code>
     *
     * <pre>
     * TODO: optimize the representation.
     * </pre>
     */
    int getTypeCount();
    /**
     * <code>repeated bytes type = 1;</code>
     *
     * <pre>
     * TODO: optimize the representation.
     * </pre>
     */
    org.jetbrains.kotlin.protobuf.ByteString getType(int index);

    /**
     * <code>repeated bytes signature = 2;</code>
     */
    java.util.List<org.jetbrains.kotlin.protobuf.ByteString> getSignatureList();
    /**
     * <code>repeated bytes signature = 2;</code>
     */
    int getSignatureCount();
    /**
     * <code>repeated bytes signature = 2;</code>
     */
    org.jetbrains.kotlin.protobuf.ByteString getSignature(int index);

    /**
     * <code>repeated bytes string = 3;</code>
     */
    java.util.List<org.jetbrains.kotlin.protobuf.ByteString> getStringList();
    /**
     * <code>repeated bytes string = 3;</code>
     */
    int getStringCount();
    /**
     * <code>repeated bytes string = 3;</code>
     */
    org.jetbrains.kotlin.protobuf.ByteString getString(int index);

    /**
     * <code>repeated bytes body = 4;</code>
     */
    java.util.List<org.jetbrains.kotlin.protobuf.ByteString> getBodyList();
    /**
     * <code>repeated bytes body = 4;</code>
     */
    int getBodyCount();
    /**
     * <code>repeated bytes body = 4;</code>
     */
    org.jetbrains.kotlin.protobuf.ByteString getBody(int index);

    /**
     * <code>repeated bytes debug_info = 5;</code>
     */
    java.util.List<org.jetbrains.kotlin.protobuf.ByteString> getDebugInfoList();
    /**
     * <code>repeated bytes debug_info = 5;</code>
     */
    int getDebugInfoCount();
    /**
     * <code>repeated bytes debug_info = 5;</code>
     */
    org.jetbrains.kotlin.protobuf.ByteString getDebugInfo(int index);
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.backend.jvm.serialization.proto.AuxTables}
   */
  public static final class AuxTables extends
      org.jetbrains.kotlin.protobuf.GeneratedMessageLite implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.backend.jvm.serialization.proto.AuxTables)
      AuxTablesOrBuilder {
    // Use AuxTables.newBuilder() to construct.
    private AuxTables(org.jetbrains.kotlin.protobuf.GeneratedMessageLite.Builder builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private AuxTables(boolean noInit) { this.unknownFields = org.jetbrains.kotlin.protobuf.ByteString.EMPTY;}

    private static final AuxTables defaultInstance;
    public static AuxTables getDefaultInstance() {
      return defaultInstance;
    }

    public AuxTables getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final org.jetbrains.kotlin.protobuf.ByteString unknownFields;
    private AuxTables(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      org.jetbrains.kotlin.protobuf.ByteString.Output unknownFieldsOutput =
          org.jetbrains.kotlin.protobuf.ByteString.newOutput();
      org.jetbrains.kotlin.protobuf.CodedOutputStream unknownFieldsCodedOutput =
          org.jetbrains.kotlin.protobuf.CodedOutputStream.newInstance(
              unknownFieldsOutput, 1);
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFieldsCodedOutput,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                type_ = new java.util.ArrayList<org.jetbrains.kotlin.protobuf.ByteString>();
                mutable_bitField0_ |= 0x00000001;
              }
              type_.add(input.readBytes());
              break;
            }
            case 18: {
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                signature_ = new java.util.ArrayList<org.jetbrains.kotlin.protobuf.ByteString>();
                mutable_bitField0_ |= 0x00000002;
              }
              signature_.add(input.readBytes());
              break;
            }
            case 26: {
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                string_ = new java.util.ArrayList<org.jetbrains.kotlin.protobuf.ByteString>();
                mutable_bitField0_ |= 0x00000004;
              }
              string_.add(input.readBytes());
              break;
            }
            case 34: {
              if (!((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
                body_ = new java.util.ArrayList<org.jetbrains.kotlin.protobuf.ByteString>();
                mutable_bitField0_ |= 0x00000008;
              }
              body_.add(input.readBytes());
              break;
            }
            case 42: {
              if (!((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
                debugInfo_ = new java.util.ArrayList<org.jetbrains.kotlin.protobuf.ByteString>();
                mutable_bitField0_ |= 0x00000010;
              }
              debugInfo_.add(input.readBytes());
              break;
            }
          }
        }
      } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
          type_ = java.util.Collections.unmodifiableList(type_);
        }
        if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
          signature_ = java.util.Collections.unmodifiableList(signature_);
        }
        if (((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
          string_ = java.util.Collections.unmodifiableList(string_);
        }
        if (((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
          body_ = java.util.Collections.unmodifiableList(body_);
        }
        if (((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
          debugInfo_ = java.util.Collections.unmodifiableList(debugInfo_);
        }
        try {
          unknownFieldsCodedOutput.flush();
        } catch (java.io.IOException e) {
        // Should not happen
        } finally {
          unknownFields = unknownFieldsOutput.toByteString();
        }
        makeExtensionsImmutable();
      }
    }
    public static org.jetbrains.kotlin.protobuf.Parser<AuxTables> PARSER =
        new org.jetbrains.kotlin.protobuf.AbstractParser<AuxTables>() {
      public AuxTables parsePartialFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        return new AuxTables(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public org.jetbrains.kotlin.protobuf.Parser<AuxTables> getParserForType() {
      return PARSER;
    }

    public static final int TYPE_FIELD_NUMBER = 1;
    private java.util.List<org.jetbrains.kotlin.protobuf.ByteString> type_;
    /**
     * <code>repeated bytes type = 1;</code>
     *
     * <pre>
     * TODO: optimize the representation.
     * </pre>
     */
    public java.util.List<org.jetbrains.kotlin.protobuf.ByteString>
        getTypeList() {
      return type_;
    }
    /**
     * <code>repeated bytes type = 1;</code>
     *
     * <pre>
     * TODO: optimize the representation.
     * </pre>
     */
    public int getTypeCount() {
      return type_.size();
    }
    /**
     * <code>repeated bytes type = 1;</code>
     *
     * <pre>
     * TODO: optimize the representation.
     * </pre>
     */
    public org.jetbrains.kotlin.protobuf.ByteString getType(int index) {
      return type_.get(index);
    }

    public static final int SIGNATURE_FIELD_NUMBER = 2;
    private java.util.List<org.jetbrains.kotlin.protobuf.ByteString> signature_;
    /**
     * <code>repeated bytes signature = 2;</code>
     */
    public java.util.List<org.jetbrains.kotlin.protobuf.ByteString>
        getSignatureList() {
      return signature_;
    }
    /**
     * <code>repeated bytes signature = 2;</code>
     */
    public int getSignatureCount() {
      return signature_.size();
    }
    /**
     * <code>repeated bytes signature = 2;</code>
     */
    public org.jetbrains.kotlin.protobuf.ByteString getSignature(int index) {
      return signature_.get(index);
    }

    public static final int STRING_FIELD_NUMBER = 3;
    private java.util.List<org.jetbrains.kotlin.protobuf.ByteString> string_;
    /**
     * <code>repeated bytes string = 3;</code>
     */
    public java.util.List<org.jetbrains.kotlin.protobuf.ByteString>
        getStringList() {
      return string_;
    }
    /**
     * <code>repeated bytes string = 3;</code>
     */
    public int getStringCount() {
      return string_.size();
    }
    /**
     * <code>repeated bytes string = 3;</code>
     */
    public org.jetbrains.kotlin.protobuf.ByteString getString(int index) {
      return string_.get(index);
    }

    public static final int BODY_FIELD_NUMBER = 4;
    private java.util.List<org.jetbrains.kotlin.protobuf.ByteString> body_;
    /**
     * <code>repeated bytes body = 4;</code>
     */
    public java.util.List<org.jetbrains.kotlin.protobuf.ByteString>
        getBodyList() {
      return body_;
    }
    /**
     * <code>repeated bytes body = 4;</code>
     */
    public int getBodyCount() {
      return body_.size();
    }
    /**
     * <code>repeated bytes body = 4;</code>
     */
    public org.jetbrains.kotlin.protobuf.ByteString getBody(int index) {
      return body_.get(index);
    }

    public static final int DEBUG_INFO_FIELD_NUMBER = 5;
    private java.util.List<org.jetbrains.kotlin.protobuf.ByteString> debugInfo_;
    /**
     * <code>repeated bytes debug_info = 5;</code>
     */
    public java.util.List<org.jetbrains.kotlin.protobuf.ByteString>
        getDebugInfoList() {
      return debugInfo_;
    }
    /**
     * <code>repeated bytes debug_info = 5;</code>
     */
    public int getDebugInfoCount() {
      return debugInfo_.size();
    }
    /**
     * <code>repeated bytes debug_info = 5;</code>
     */
    public org.jetbrains.kotlin.protobuf.ByteString getDebugInfo(int index) {
      return debugInfo_.get(index);
    }

    private void initFields() {
      type_ = java.util.Collections.emptyList();
      signature_ = java.util.Collections.emptyList();
      string_ = java.util.Collections.emptyList();
      body_ = java.util.Collections.emptyList();
      debugInfo_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(org.jetbrains.kotlin.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      for (int i = 0; i < type_.size(); i++) {
        output.writeBytes(1, type_.get(i));
      }
      for (int i = 0; i < signature_.size(); i++) {
        output.writeBytes(2, signature_.get(i));
      }
      for (int i = 0; i < string_.size(); i++) {
        output.writeBytes(3, string_.get(i));
      }
      for (int i = 0; i < body_.size(); i++) {
        output.writeBytes(4, body_.get(i));
      }
      for (int i = 0; i < debugInfo_.size(); i++) {
        output.writeBytes(5, debugInfo_.get(i));
      }
      output.writeRawBytes(unknownFields);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      {
        int dataSize = 0;
        for (int i = 0; i < type_.size(); i++) {
          dataSize += org.jetbrains.kotlin.protobuf.CodedOutputStream
            .computeBytesSizeNoTag(type_.get(i));
        }
        size += dataSize;
        size += 1 * getTypeList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < signature_.size(); i++) {
          dataSize += org.jetbrains.kotlin.protobuf.CodedOutputStream
            .computeBytesSizeNoTag(signature_.get(i));
        }
        size += dataSize;
        size += 1 * getSignatureList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < string_.size(); i++) {
          dataSize += org.jetbrains.kotlin.protobuf.CodedOutputStream
            .computeBytesSizeNoTag(string_.get(i));
        }
        size += dataSize;
        size += 1 * getStringList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < body_.size(); i++) {
          dataSize += org.jetbrains.kotlin.protobuf.CodedOutputStream
            .computeBytesSizeNoTag(body_.get(i));
        }
        size += dataSize;
        size += 1 * getBodyList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < debugInfo_.size(); i++) {
          dataSize += org.jetbrains.kotlin.protobuf.CodedOutputStream
            .computeBytesSizeNoTag(debugInfo_.get(i));
        }
        size += dataSize;
        size += 1 * getDebugInfoList().size();
      }
      size += unknownFields.size();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.AuxTables parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.AuxTables parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.AuxTables parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.AuxTables parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.AuxTables parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.AuxTables parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.AuxTables parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.AuxTables parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.AuxTables parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.AuxTables parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.AuxTables prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    /**
     * Protobuf type {@code org.jetbrains.kotlin.backend.jvm.serialization.proto.AuxTables}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessageLite.Builder<
          org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.AuxTables, Builder>
        implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.backend.jvm.serialization.proto.AuxTables)
        org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.AuxTablesOrBuilder {
      // Construct using org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.AuxTables.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private void maybeForceBuilderInitialization() {
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        type_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        signature_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        string_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);
        body_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000008);
        debugInfo_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000010);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.AuxTables getDefaultInstanceForType() {
        return org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.AuxTables.getDefaultInstance();
      }

      public org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.AuxTables build() {
        org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.AuxTables result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.AuxTables buildPartial() {
        org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.AuxTables result = new org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.AuxTables(this);
        int from_bitField0_ = bitField0_;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          type_ = java.util.Collections.unmodifiableList(type_);
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.type_ = type_;
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          signature_ = java.util.Collections.unmodifiableList(signature_);
          bitField0_ = (bitField0_ & ~0x00000002);
        }
        result.signature_ = signature_;
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
          string_ = java.util.Collections.unmodifiableList(string_);
          bitField0_ = (bitField0_ & ~0x00000004);
        }
        result.string_ = string_;
        if (((bitField0_ & 0x00000008) == 0x00000008)) {
          body_ = java.util.Collections.unmodifiableList(body_);
          bitField0_ = (bitField0_ & ~0x00000008);
        }
        result.body_ = body_;
        if (((bitField0_ & 0x00000010) == 0x00000010)) {
          debugInfo_ = java.util.Collections.unmodifiableList(debugInfo_);
          bitField0_ = (bitField0_ & ~0x00000010);
        }
        result.debugInfo_ = debugInfo_;
        return result;
      }

      public Builder mergeFrom(org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.AuxTables other) {
        if (other == org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.AuxTables.getDefaultInstance()) return this;
        if (!other.type_.isEmpty()) {
          if (type_.isEmpty()) {
            type_ = other.type_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureTypeIsMutable();
            type_.addAll(other.type_);
          }
          
        }
        if (!other.signature_.isEmpty()) {
          if (signature_.isEmpty()) {
            signature_ = other.signature_;
            bitField0_ = (bitField0_ & ~0x00000002);
          } else {
            ensureSignatureIsMutable();
            signature_.addAll(other.signature_);
          }
          
        }
        if (!other.string_.isEmpty()) {
          if (string_.isEmpty()) {
            string_ = other.string_;
            bitField0_ = (bitField0_ & ~0x00000004);
          } else {
            ensureStringIsMutable();
            string_.addAll(other.string_);
          }
          
        }
        if (!other.body_.isEmpty()) {
          if (body_.isEmpty()) {
            body_ = other.body_;
            bitField0_ = (bitField0_ & ~0x00000008);
          } else {
            ensureBodyIsMutable();
            body_.addAll(other.body_);
          }
          
        }
        if (!other.debugInfo_.isEmpty()) {
          if (debugInfo_.isEmpty()) {
            debugInfo_ = other.debugInfo_;
            bitField0_ = (bitField0_ & ~0x00000010);
          } else {
            ensureDebugInfoIsMutable();
            debugInfo_.addAll(other.debugInfo_);
          }
          
        }
        setUnknownFields(
            getUnknownFields().concat(other.unknownFields));
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.AuxTables parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.AuxTables) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.util.List<org.jetbrains.kotlin.protobuf.ByteString> type_ = java.util.Collections.emptyList();
      private void ensureTypeIsMutable() {
        if (!((bitField0_ & 0x00000001) == 0x00000001)) {
          type_ = new java.util.ArrayList<org.jetbrains.kotlin.protobuf.ByteString>(type_);
          bitField0_ |= 0x00000001;
         }
      }
      /**
       * <code>repeated bytes type = 1;</code>
       *
       * <pre>
       * TODO: optimize the representation.
       * </pre>
       */
      public java.util.List<org.jetbrains.kotlin.protobuf.ByteString>
          getTypeList() {
        return java.util.Collections.unmodifiableList(type_);
      }
      /**
       * <code>repeated bytes type = 1;</code>
       *
       * <pre>
       * TODO: optimize the representation.
       * </pre>
       */
      public int getTypeCount() {
        return type_.size();
      }
      /**
       * <code>repeated bytes type = 1;</code>
       *
       * <pre>
       * TODO: optimize the representation.
       * </pre>
       */
      public org.jetbrains.kotlin.protobuf.ByteString getType(int index) {
        return type_.get(index);
      }
      /**
       * <code>repeated bytes type = 1;</code>
       *
       * <pre>
       * TODO: optimize the representation.
       * </pre>
       */
      public Builder setType(
          int index, org.jetbrains.kotlin.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureTypeIsMutable();
        type_.set(index, value);
        
        return this;
      }
      /**
       * <code>repeated bytes type = 1;</code>
       *
       * <pre>
       * TODO: optimize the representation.
       * </pre>
       */
      public Builder addType(org.jetbrains.kotlin.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureTypeIsMutable();
        type_.add(value);
        
        return this;
      }
      /**
       * <code>repeated bytes type = 1;</code>
       *
       * <pre>
       * TODO: optimize the representation.
       * </pre>
       */
      public Builder addAllType(
          java.lang.Iterable<? extends org.jetbrains.kotlin.protobuf.ByteString> values) {
        ensureTypeIsMutable();
        org.jetbrains.kotlin.protobuf.AbstractMessageLite.Builder.addAll(
            values, type_);
        
        return this;
      }
      /**
       * <code>repeated bytes type = 1;</code>
       *
       * <pre>
       * TODO: optimize the representation.
       * </pre>
       */
      public Builder clearType() {
        type_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        
        return this;
      }

      private java.util.List<org.jetbrains.kotlin.protobuf.ByteString> signature_ = java.util.Collections.emptyList();
      private void ensureSignatureIsMutable() {
        if (!((bitField0_ & 0x00000002) == 0x00000002)) {
          signature_ = new java.util.ArrayList<org.jetbrains.kotlin.protobuf.ByteString>(signature_);
          bitField0_ |= 0x00000002;
         }
      }
      /**
       * <code>repeated bytes signature = 2;</code>
       */
      public java.util.List<org.jetbrains.kotlin.protobuf.ByteString>
          getSignatureList() {
        return java.util.Collections.unmodifiableList(signature_);
      }
      /**
       * <code>repeated bytes signature = 2;</code>
       */
      public int getSignatureCount() {
        return signature_.size();
      }
      /**
       * <code>repeated bytes signature = 2;</code>
       */
      public org.jetbrains.kotlin.protobuf.ByteString getSignature(int index) {
        return signature_.get(index);
      }
      /**
       * <code>repeated bytes signature = 2;</code>
       */
      public Builder setSignature(
          int index, org.jetbrains.kotlin.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureSignatureIsMutable();
        signature_.set(index, value);
        
        return this;
      }
      /**
       * <code>repeated bytes signature = 2;</code>
       */
      public Builder addSignature(org.jetbrains.kotlin.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureSignatureIsMutable();
        signature_.add(value);
        
        return this;
      }
      /**
       * <code>repeated bytes signature = 2;</code>
       */
      public Builder addAllSignature(
          java.lang.Iterable<? extends org.jetbrains.kotlin.protobuf.ByteString> values) {
        ensureSignatureIsMutable();
        org.jetbrains.kotlin.protobuf.AbstractMessageLite.Builder.addAll(
            values, signature_);
        
        return this;
      }
      /**
       * <code>repeated bytes signature = 2;</code>
       */
      public Builder clearSignature() {
        signature_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        
        return this;
      }

      private java.util.List<org.jetbrains.kotlin.protobuf.ByteString> string_ = java.util.Collections.emptyList();
      private void ensureStringIsMutable() {
        if (!((bitField0_ & 0x00000004) == 0x00000004)) {
          string_ = new java.util.ArrayList<org.jetbrains.kotlin.protobuf.ByteString>(string_);
          bitField0_ |= 0x00000004;
         }
      }
      /**
       * <code>repeated bytes string = 3;</code>
       */
      public java.util.List<org.jetbrains.kotlin.protobuf.ByteString>
          getStringList() {
        return java.util.Collections.unmodifiableList(string_);
      }
      /**
       * <code>repeated bytes string = 3;</code>
       */
      public int getStringCount() {
        return string_.size();
      }
      /**
       * <code>repeated bytes string = 3;</code>
       */
      public org.jetbrains.kotlin.protobuf.ByteString getString(int index) {
        return string_.get(index);
      }
      /**
       * <code>repeated bytes string = 3;</code>
       */
      public Builder setString(
          int index, org.jetbrains.kotlin.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureStringIsMutable();
        string_.set(index, value);
        
        return this;
      }
      /**
       * <code>repeated bytes string = 3;</code>
       */
      public Builder addString(org.jetbrains.kotlin.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureStringIsMutable();
        string_.add(value);
        
        return this;
      }
      /**
       * <code>repeated bytes string = 3;</code>
       */
      public Builder addAllString(
          java.lang.Iterable<? extends org.jetbrains.kotlin.protobuf.ByteString> values) {
        ensureStringIsMutable();
        org.jetbrains.kotlin.protobuf.AbstractMessageLite.Builder.addAll(
            values, string_);
        
        return this;
      }
      /**
       * <code>repeated bytes string = 3;</code>
       */
      public Builder clearString() {
        string_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);
        
        return this;
      }

      private java.util.List<org.jetbrains.kotlin.protobuf.ByteString> body_ = java.util.Collections.emptyList();
      private void ensureBodyIsMutable() {
        if (!((bitField0_ & 0x00000008) == 0x00000008)) {
          body_ = new java.util.ArrayList<org.jetbrains.kotlin.protobuf.ByteString>(body_);
          bitField0_ |= 0x00000008;
         }
      }
      /**
       * <code>repeated bytes body = 4;</code>
       */
      public java.util.List<org.jetbrains.kotlin.protobuf.ByteString>
          getBodyList() {
        return java.util.Collections.unmodifiableList(body_);
      }
      /**
       * <code>repeated bytes body = 4;</code>
       */
      public int getBodyCount() {
        return body_.size();
      }
      /**
       * <code>repeated bytes body = 4;</code>
       */
      public org.jetbrains.kotlin.protobuf.ByteString getBody(int index) {
        return body_.get(index);
      }
      /**
       * <code>repeated bytes body = 4;</code>
       */
      public Builder setBody(
          int index, org.jetbrains.kotlin.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureBodyIsMutable();
        body_.set(index, value);
        
        return this;
      }
      /**
       * <code>repeated bytes body = 4;</code>
       */
      public Builder addBody(org.jetbrains.kotlin.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureBodyIsMutable();
        body_.add(value);
        
        return this;
      }
      /**
       * <code>repeated bytes body = 4;</code>
       */
      public Builder addAllBody(
          java.lang.Iterable<? extends org.jetbrains.kotlin.protobuf.ByteString> values) {
        ensureBodyIsMutable();
        org.jetbrains.kotlin.protobuf.AbstractMessageLite.Builder.addAll(
            values, body_);
        
        return this;
      }
      /**
       * <code>repeated bytes body = 4;</code>
       */
      public Builder clearBody() {
        body_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000008);
        
        return this;
      }

      private java.util.List<org.jetbrains.kotlin.protobuf.ByteString> debugInfo_ = java.util.Collections.emptyList();
      private void ensureDebugInfoIsMutable() {
        if (!((bitField0_ & 0x00000010) == 0x00000010)) {
          debugInfo_ = new java.util.ArrayList<org.jetbrains.kotlin.protobuf.ByteString>(debugInfo_);
          bitField0_ |= 0x00000010;
         }
      }
      /**
       * <code>repeated bytes debug_info = 5;</code>
       */
      public java.util.List<org.jetbrains.kotlin.protobuf.ByteString>
          getDebugInfoList() {
        return java.util.Collections.unmodifiableList(debugInfo_);
      }
      /**
       * <code>repeated bytes debug_info = 5;</code>
       */
      public int getDebugInfoCount() {
        return debugInfo_.size();
      }
      /**
       * <code>repeated bytes debug_info = 5;</code>
       */
      public org.jetbrains.kotlin.protobuf.ByteString getDebugInfo(int index) {
        return debugInfo_.get(index);
      }
      /**
       * <code>repeated bytes debug_info = 5;</code>
       */
      public Builder setDebugInfo(
          int index, org.jetbrains.kotlin.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureDebugInfoIsMutable();
        debugInfo_.set(index, value);
        
        return this;
      }
      /**
       * <code>repeated bytes debug_info = 5;</code>
       */
      public Builder addDebugInfo(org.jetbrains.kotlin.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureDebugInfoIsMutable();
        debugInfo_.add(value);
        
        return this;
      }
      /**
       * <code>repeated bytes debug_info = 5;</code>
       */
      public Builder addAllDebugInfo(
          java.lang.Iterable<? extends org.jetbrains.kotlin.protobuf.ByteString> values) {
        ensureDebugInfoIsMutable();
        org.jetbrains.kotlin.protobuf.AbstractMessageLite.Builder.addAll(
            values, debugInfo_);
        
        return this;
      }
      /**
       * <code>repeated bytes debug_info = 5;</code>
       */
      public Builder clearDebugInfo() {
        debugInfo_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000010);
        
        return this;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.backend.jvm.serialization.proto.AuxTables)
    }

    static {
      defaultInstance = new AuxTables(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.backend.jvm.serialization.proto.AuxTables)
  }

  public interface JvmIrFileOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIrFile)
      org.jetbrains.kotlin.protobuf.MessageLiteOrBuilder {

    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclaration declaration = 1;</code>
     */
    java.util.List<org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclaration> 
        getDeclarationList();
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclaration declaration = 1;</code>
     */
    org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclaration getDeclaration(int index);
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclaration declaration = 1;</code>
     */
    int getDeclarationCount();

    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructorCall annotation = 2;</code>
     */
    java.util.List<org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructorCall> 
        getAnnotationList();
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructorCall annotation = 2;</code>
     */
    org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructorCall getAnnotation(int index);
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructorCall annotation = 2;</code>
     */
    int getAnnotationCount();

    /**
     * <code>repeated int32 facade_fq_name = 3;</code>
     */
    java.util.List<java.lang.Integer> getFacadeFqNameList();
    /**
     * <code>repeated int32 facade_fq_name = 3;</code>
     */
    int getFacadeFqNameCount();
    /**
     * <code>repeated int32 facade_fq_name = 3;</code>
     */
    int getFacadeFqName(int index);

    /**
     * <code>required .org.jetbrains.kotlin.backend.jvm.serialization.proto.AuxTables aux_tables = 4;</code>
     */
    boolean hasAuxTables();
    /**
     * <code>required .org.jetbrains.kotlin.backend.jvm.serialization.proto.AuxTables aux_tables = 4;</code>
     */
    org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.AuxTables getAuxTables();
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIrFile}
   */
  public static final class JvmIrFile extends
      org.jetbrains.kotlin.protobuf.GeneratedMessageLite implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIrFile)
      JvmIrFileOrBuilder {
    // Use JvmIrFile.newBuilder() to construct.
    private JvmIrFile(org.jetbrains.kotlin.protobuf.GeneratedMessageLite.Builder builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private JvmIrFile(boolean noInit) { this.unknownFields = org.jetbrains.kotlin.protobuf.ByteString.EMPTY;}

    private static final JvmIrFile defaultInstance;
    public static JvmIrFile getDefaultInstance() {
      return defaultInstance;
    }

    public JvmIrFile getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final org.jetbrains.kotlin.protobuf.ByteString unknownFields;
    private JvmIrFile(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      org.jetbrains.kotlin.protobuf.ByteString.Output unknownFieldsOutput =
          org.jetbrains.kotlin.protobuf.ByteString.newOutput();
      org.jetbrains.kotlin.protobuf.CodedOutputStream unknownFieldsCodedOutput =
          org.jetbrains.kotlin.protobuf.CodedOutputStream.newInstance(
              unknownFieldsOutput, 1);
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFieldsCodedOutput,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                declaration_ = new java.util.ArrayList<org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclaration>();
                mutable_bitField0_ |= 0x00000001;
              }
              declaration_.add(input.readMessage(org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclaration.PARSER, extensionRegistry));
              break;
            }
            case 18: {
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                annotation_ = new java.util.ArrayList<org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructorCall>();
                mutable_bitField0_ |= 0x00000002;
              }
              annotation_.add(input.readMessage(org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructorCall.PARSER, extensionRegistry));
              break;
            }
            case 24: {
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                facadeFqName_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000004;
              }
              facadeFqName_.add(input.readInt32());
              break;
            }
            case 26: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004) && input.getBytesUntilLimit() > 0) {
                facadeFqName_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000004;
              }
              while (input.getBytesUntilLimit() > 0) {
                facadeFqName_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 34: {
              org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.AuxTables.Builder subBuilder = null;
              if (((bitField0_ & 0x00000001) == 0x00000001)) {
                subBuilder = auxTables_.toBuilder();
              }
              auxTables_ = input.readMessage(org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.AuxTables.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(auxTables_);
                auxTables_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000001;
              break;
            }
          }
        }
      } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
          declaration_ = java.util.Collections.unmodifiableList(declaration_);
        }
        if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
          annotation_ = java.util.Collections.unmodifiableList(annotation_);
        }
        if (((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
          facadeFqName_ = java.util.Collections.unmodifiableList(facadeFqName_);
        }
        try {
          unknownFieldsCodedOutput.flush();
        } catch (java.io.IOException e) {
        // Should not happen
        } finally {
          unknownFields = unknownFieldsOutput.toByteString();
        }
        makeExtensionsImmutable();
      }
    }
    public static org.jetbrains.kotlin.protobuf.Parser<JvmIrFile> PARSER =
        new org.jetbrains.kotlin.protobuf.AbstractParser<JvmIrFile>() {
      public JvmIrFile parsePartialFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        return new JvmIrFile(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public org.jetbrains.kotlin.protobuf.Parser<JvmIrFile> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int DECLARATION_FIELD_NUMBER = 1;
    private java.util.List<org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclaration> declaration_;
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclaration declaration = 1;</code>
     */
    public java.util.List<org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclaration> getDeclarationList() {
      return declaration_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclaration declaration = 1;</code>
     */
    public java.util.List<? extends org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationOrBuilder> 
        getDeclarationOrBuilderList() {
      return declaration_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclaration declaration = 1;</code>
     */
    public int getDeclarationCount() {
      return declaration_.size();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclaration declaration = 1;</code>
     */
    public org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclaration getDeclaration(int index) {
      return declaration_.get(index);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclaration declaration = 1;</code>
     */
    public org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationOrBuilder getDeclarationOrBuilder(
        int index) {
      return declaration_.get(index);
    }

    public static final int ANNOTATION_FIELD_NUMBER = 2;
    private java.util.List<org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructorCall> annotation_;
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructorCall annotation = 2;</code>
     */
    public java.util.List<org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructorCall> getAnnotationList() {
      return annotation_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructorCall annotation = 2;</code>
     */
    public java.util.List<? extends org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructorCallOrBuilder> 
        getAnnotationOrBuilderList() {
      return annotation_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructorCall annotation = 2;</code>
     */
    public int getAnnotationCount() {
      return annotation_.size();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructorCall annotation = 2;</code>
     */
    public org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructorCall getAnnotation(int index) {
      return annotation_.get(index);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructorCall annotation = 2;</code>
     */
    public org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructorCallOrBuilder getAnnotationOrBuilder(
        int index) {
      return annotation_.get(index);
    }

    public static final int FACADE_FQ_NAME_FIELD_NUMBER = 3;
    private java.util.List<java.lang.Integer> facadeFqName_;
    /**
     * <code>repeated int32 facade_fq_name = 3;</code>
     */
    public java.util.List<java.lang.Integer>
        getFacadeFqNameList() {
      return facadeFqName_;
    }
    /**
     * <code>repeated int32 facade_fq_name = 3;</code>
     */
    public int getFacadeFqNameCount() {
      return facadeFqName_.size();
    }
    /**
     * <code>repeated int32 facade_fq_name = 3;</code>
     */
    public int getFacadeFqName(int index) {
      return facadeFqName_.get(index);
    }

    public static final int AUX_TABLES_FIELD_NUMBER = 4;
    private org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.AuxTables auxTables_;
    /**
     * <code>required .org.jetbrains.kotlin.backend.jvm.serialization.proto.AuxTables aux_tables = 4;</code>
     */
    public boolean hasAuxTables() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required .org.jetbrains.kotlin.backend.jvm.serialization.proto.AuxTables aux_tables = 4;</code>
     */
    public org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.AuxTables getAuxTables() {
      return auxTables_;
    }

    private void initFields() {
      declaration_ = java.util.Collections.emptyList();
      annotation_ = java.util.Collections.emptyList();
      facadeFqName_ = java.util.Collections.emptyList();
      auxTables_ = org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.AuxTables.getDefaultInstance();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasAuxTables()) {
        memoizedIsInitialized = 0;
        return false;
      }
      for (int i = 0; i < getDeclarationCount(); i++) {
        if (!getDeclaration(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      for (int i = 0; i < getAnnotationCount(); i++) {
        if (!getAnnotation(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(org.jetbrains.kotlin.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      for (int i = 0; i < declaration_.size(); i++) {
        output.writeMessage(1, declaration_.get(i));
      }
      for (int i = 0; i < annotation_.size(); i++) {
        output.writeMessage(2, annotation_.get(i));
      }
      for (int i = 0; i < facadeFqName_.size(); i++) {
        output.writeInt32(3, facadeFqName_.get(i));
      }
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeMessage(4, auxTables_);
      }
      output.writeRawBytes(unknownFields);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < declaration_.size(); i++) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(1, declaration_.get(i));
      }
      for (int i = 0; i < annotation_.size(); i++) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(2, annotation_.get(i));
      }
      {
        int dataSize = 0;
        for (int i = 0; i < facadeFqName_.size(); i++) {
          dataSize += org.jetbrains.kotlin.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(facadeFqName_.get(i));
        }
        size += dataSize;
        size += 1 * getFacadeFqNameList().size();
      }
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(4, auxTables_);
      }
      size += unknownFields.size();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.JvmIrFile parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.JvmIrFile parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.JvmIrFile parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.JvmIrFile parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.JvmIrFile parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.JvmIrFile parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.JvmIrFile parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.JvmIrFile parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.JvmIrFile parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.JvmIrFile parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.JvmIrFile prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    /**
     * Protobuf type {@code org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIrFile}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessageLite.Builder<
          org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.JvmIrFile, Builder>
        implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIrFile)
        org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.JvmIrFileOrBuilder {
      // Construct using org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.JvmIrFile.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private void maybeForceBuilderInitialization() {
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        declaration_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        annotation_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        facadeFqName_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);
        auxTables_ = org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.AuxTables.getDefaultInstance();
        bitField0_ = (bitField0_ & ~0x00000008);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.JvmIrFile getDefaultInstanceForType() {
        return org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.JvmIrFile.getDefaultInstance();
      }

      public org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.JvmIrFile build() {
        org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.JvmIrFile result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.JvmIrFile buildPartial() {
        org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.JvmIrFile result = new org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.JvmIrFile(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          declaration_ = java.util.Collections.unmodifiableList(declaration_);
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.declaration_ = declaration_;
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          annotation_ = java.util.Collections.unmodifiableList(annotation_);
          bitField0_ = (bitField0_ & ~0x00000002);
        }
        result.annotation_ = annotation_;
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
          facadeFqName_ = java.util.Collections.unmodifiableList(facadeFqName_);
          bitField0_ = (bitField0_ & ~0x00000004);
        }
        result.facadeFqName_ = facadeFqName_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000001;
        }
        result.auxTables_ = auxTables_;
        result.bitField0_ = to_bitField0_;
        return result;
      }

      public Builder mergeFrom(org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.JvmIrFile other) {
        if (other == org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.JvmIrFile.getDefaultInstance()) return this;
        if (!other.declaration_.isEmpty()) {
          if (declaration_.isEmpty()) {
            declaration_ = other.declaration_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureDeclarationIsMutable();
            declaration_.addAll(other.declaration_);
          }
          
        }
        if (!other.annotation_.isEmpty()) {
          if (annotation_.isEmpty()) {
            annotation_ = other.annotation_;
            bitField0_ = (bitField0_ & ~0x00000002);
          } else {
            ensureAnnotationIsMutable();
            annotation_.addAll(other.annotation_);
          }
          
        }
        if (!other.facadeFqName_.isEmpty()) {
          if (facadeFqName_.isEmpty()) {
            facadeFqName_ = other.facadeFqName_;
            bitField0_ = (bitField0_ & ~0x00000004);
          } else {
            ensureFacadeFqNameIsMutable();
            facadeFqName_.addAll(other.facadeFqName_);
          }
          
        }
        if (other.hasAuxTables()) {
          mergeAuxTables(other.getAuxTables());
        }
        setUnknownFields(
            getUnknownFields().concat(other.unknownFields));
        return this;
      }

      public final boolean isInitialized() {
        if (!hasAuxTables()) {
          
          return false;
        }
        for (int i = 0; i < getDeclarationCount(); i++) {
          if (!getDeclaration(i).isInitialized()) {
            
            return false;
          }
        }
        for (int i = 0; i < getAnnotationCount(); i++) {
          if (!getAnnotation(i).isInitialized()) {
            
            return false;
          }
        }
        return true;
      }

      public Builder mergeFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.JvmIrFile parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.JvmIrFile) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.util.List<org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclaration> declaration_ =
        java.util.Collections.emptyList();
      private void ensureDeclarationIsMutable() {
        if (!((bitField0_ & 0x00000001) == 0x00000001)) {
          declaration_ = new java.util.ArrayList<org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclaration>(declaration_);
          bitField0_ |= 0x00000001;
         }
      }

      /**
       * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclaration declaration = 1;</code>
       */
      public java.util.List<org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclaration> getDeclarationList() {
        return java.util.Collections.unmodifiableList(declaration_);
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclaration declaration = 1;</code>
       */
      public int getDeclarationCount() {
        return declaration_.size();
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclaration declaration = 1;</code>
       */
      public org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclaration getDeclaration(int index) {
        return declaration_.get(index);
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclaration declaration = 1;</code>
       */
      public Builder setDeclaration(
          int index, org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclaration value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureDeclarationIsMutable();
        declaration_.set(index, value);

        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclaration declaration = 1;</code>
       */
      public Builder setDeclaration(
          int index, org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclaration.Builder builderForValue) {
        ensureDeclarationIsMutable();
        declaration_.set(index, builderForValue.build());

        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclaration declaration = 1;</code>
       */
      public Builder addDeclaration(org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclaration value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureDeclarationIsMutable();
        declaration_.add(value);

        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclaration declaration = 1;</code>
       */
      public Builder addDeclaration(
          int index, org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclaration value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureDeclarationIsMutable();
        declaration_.add(index, value);

        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclaration declaration = 1;</code>
       */
      public Builder addDeclaration(
          org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclaration.Builder builderForValue) {
        ensureDeclarationIsMutable();
        declaration_.add(builderForValue.build());

        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclaration declaration = 1;</code>
       */
      public Builder addDeclaration(
          int index, org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclaration.Builder builderForValue) {
        ensureDeclarationIsMutable();
        declaration_.add(index, builderForValue.build());

        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclaration declaration = 1;</code>
       */
      public Builder addAllDeclaration(
          java.lang.Iterable<? extends org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclaration> values) {
        ensureDeclarationIsMutable();
        org.jetbrains.kotlin.protobuf.AbstractMessageLite.Builder.addAll(
            values, declaration_);

        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclaration declaration = 1;</code>
       */
      public Builder clearDeclaration() {
        declaration_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);

        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclaration declaration = 1;</code>
       */
      public Builder removeDeclaration(int index) {
        ensureDeclarationIsMutable();
        declaration_.remove(index);

        return this;
      }

      private java.util.List<org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructorCall> annotation_ =
        java.util.Collections.emptyList();
      private void ensureAnnotationIsMutable() {
        if (!((bitField0_ & 0x00000002) == 0x00000002)) {
          annotation_ = new java.util.ArrayList<org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructorCall>(annotation_);
          bitField0_ |= 0x00000002;
         }
      }

      /**
       * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructorCall annotation = 2;</code>
       */
      public java.util.List<org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructorCall> getAnnotationList() {
        return java.util.Collections.unmodifiableList(annotation_);
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructorCall annotation = 2;</code>
       */
      public int getAnnotationCount() {
        return annotation_.size();
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructorCall annotation = 2;</code>
       */
      public org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructorCall getAnnotation(int index) {
        return annotation_.get(index);
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructorCall annotation = 2;</code>
       */
      public Builder setAnnotation(
          int index, org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructorCall value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureAnnotationIsMutable();
        annotation_.set(index, value);

        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructorCall annotation = 2;</code>
       */
      public Builder setAnnotation(
          int index, org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructorCall.Builder builderForValue) {
        ensureAnnotationIsMutable();
        annotation_.set(index, builderForValue.build());

        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructorCall annotation = 2;</code>
       */
      public Builder addAnnotation(org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructorCall value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureAnnotationIsMutable();
        annotation_.add(value);

        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructorCall annotation = 2;</code>
       */
      public Builder addAnnotation(
          int index, org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructorCall value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureAnnotationIsMutable();
        annotation_.add(index, value);

        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructorCall annotation = 2;</code>
       */
      public Builder addAnnotation(
          org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructorCall.Builder builderForValue) {
        ensureAnnotationIsMutable();
        annotation_.add(builderForValue.build());

        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructorCall annotation = 2;</code>
       */
      public Builder addAnnotation(
          int index, org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructorCall.Builder builderForValue) {
        ensureAnnotationIsMutable();
        annotation_.add(index, builderForValue.build());

        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructorCall annotation = 2;</code>
       */
      public Builder addAllAnnotation(
          java.lang.Iterable<? extends org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructorCall> values) {
        ensureAnnotationIsMutable();
        org.jetbrains.kotlin.protobuf.AbstractMessageLite.Builder.addAll(
            values, annotation_);

        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructorCall annotation = 2;</code>
       */
      public Builder clearAnnotation() {
        annotation_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);

        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructorCall annotation = 2;</code>
       */
      public Builder removeAnnotation(int index) {
        ensureAnnotationIsMutable();
        annotation_.remove(index);

        return this;
      }

      private java.util.List<java.lang.Integer> facadeFqName_ = java.util.Collections.emptyList();
      private void ensureFacadeFqNameIsMutable() {
        if (!((bitField0_ & 0x00000004) == 0x00000004)) {
          facadeFqName_ = new java.util.ArrayList<java.lang.Integer>(facadeFqName_);
          bitField0_ |= 0x00000004;
         }
      }
      /**
       * <code>repeated int32 facade_fq_name = 3;</code>
       */
      public java.util.List<java.lang.Integer>
          getFacadeFqNameList() {
        return java.util.Collections.unmodifiableList(facadeFqName_);
      }
      /**
       * <code>repeated int32 facade_fq_name = 3;</code>
       */
      public int getFacadeFqNameCount() {
        return facadeFqName_.size();
      }
      /**
       * <code>repeated int32 facade_fq_name = 3;</code>
       */
      public int getFacadeFqName(int index) {
        return facadeFqName_.get(index);
      }
      /**
       * <code>repeated int32 facade_fq_name = 3;</code>
       */
      public Builder setFacadeFqName(
          int index, int value) {
        ensureFacadeFqNameIsMutable();
        facadeFqName_.set(index, value);
        
        return this;
      }
      /**
       * <code>repeated int32 facade_fq_name = 3;</code>
       */
      public Builder addFacadeFqName(int value) {
        ensureFacadeFqNameIsMutable();
        facadeFqName_.add(value);
        
        return this;
      }
      /**
       * <code>repeated int32 facade_fq_name = 3;</code>
       */
      public Builder addAllFacadeFqName(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureFacadeFqNameIsMutable();
        org.jetbrains.kotlin.protobuf.AbstractMessageLite.Builder.addAll(
            values, facadeFqName_);
        
        return this;
      }
      /**
       * <code>repeated int32 facade_fq_name = 3;</code>
       */
      public Builder clearFacadeFqName() {
        facadeFqName_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);
        
        return this;
      }

      private org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.AuxTables auxTables_ = org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.AuxTables.getDefaultInstance();
      /**
       * <code>required .org.jetbrains.kotlin.backend.jvm.serialization.proto.AuxTables aux_tables = 4;</code>
       */
      public boolean hasAuxTables() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>required .org.jetbrains.kotlin.backend.jvm.serialization.proto.AuxTables aux_tables = 4;</code>
       */
      public org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.AuxTables getAuxTables() {
        return auxTables_;
      }
      /**
       * <code>required .org.jetbrains.kotlin.backend.jvm.serialization.proto.AuxTables aux_tables = 4;</code>
       */
      public Builder setAuxTables(org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.AuxTables value) {
        if (value == null) {
          throw new NullPointerException();
        }
        auxTables_ = value;

        bitField0_ |= 0x00000008;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.backend.jvm.serialization.proto.AuxTables aux_tables = 4;</code>
       */
      public Builder setAuxTables(
          org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.AuxTables.Builder builderForValue) {
        auxTables_ = builderForValue.build();

        bitField0_ |= 0x00000008;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.backend.jvm.serialization.proto.AuxTables aux_tables = 4;</code>
       */
      public Builder mergeAuxTables(org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.AuxTables value) {
        if (((bitField0_ & 0x00000008) == 0x00000008) &&
            auxTables_ != org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.AuxTables.getDefaultInstance()) {
          auxTables_ =
            org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.AuxTables.newBuilder(auxTables_).mergeFrom(value).buildPartial();
        } else {
          auxTables_ = value;
        }

        bitField0_ |= 0x00000008;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.backend.jvm.serialization.proto.AuxTables aux_tables = 4;</code>
       */
      public Builder clearAuxTables() {
        auxTables_ = org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.AuxTables.getDefaultInstance();

        bitField0_ = (bitField0_ & ~0x00000008);
        return this;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIrFile)
    }

    static {
      defaultInstance = new JvmIrFile(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIrFile)
  }

  public interface JvmIrClassOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIrClass)
      org.jetbrains.kotlin.protobuf.MessageLiteOrBuilder {

    /**
     * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.IrClass ir_class = 1;</code>
     */
    boolean hasIrClass();
    /**
     * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.IrClass ir_class = 1;</code>
     */
    org.jetbrains.kotlin.backend.common.serialization.proto.IrClass getIrClass();

    /**
     * <code>required .org.jetbrains.kotlin.backend.jvm.serialization.proto.AuxTables aux_tables = 2;</code>
     */
    boolean hasAuxTables();
    /**
     * <code>required .org.jetbrains.kotlin.backend.jvm.serialization.proto.AuxTables aux_tables = 2;</code>
     */
    org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.AuxTables getAuxTables();
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIrClass}
   */
  public static final class JvmIrClass extends
      org.jetbrains.kotlin.protobuf.GeneratedMessageLite implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIrClass)
      JvmIrClassOrBuilder {
    // Use JvmIrClass.newBuilder() to construct.
    private JvmIrClass(org.jetbrains.kotlin.protobuf.GeneratedMessageLite.Builder builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private JvmIrClass(boolean noInit) { this.unknownFields = org.jetbrains.kotlin.protobuf.ByteString.EMPTY;}

    private static final JvmIrClass defaultInstance;
    public static JvmIrClass getDefaultInstance() {
      return defaultInstance;
    }

    public JvmIrClass getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final org.jetbrains.kotlin.protobuf.ByteString unknownFields;
    private JvmIrClass(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      org.jetbrains.kotlin.protobuf.ByteString.Output unknownFieldsOutput =
          org.jetbrains.kotlin.protobuf.ByteString.newOutput();
      org.jetbrains.kotlin.protobuf.CodedOutputStream unknownFieldsCodedOutput =
          org.jetbrains.kotlin.protobuf.CodedOutputStream.newInstance(
              unknownFieldsOutput, 1);
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFieldsCodedOutput,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              org.jetbrains.kotlin.backend.common.serialization.proto.IrClass.Builder subBuilder = null;
              if (((bitField0_ & 0x00000001) == 0x00000001)) {
                subBuilder = irClass_.toBuilder();
              }
              irClass_ = input.readMessage(org.jetbrains.kotlin.backend.common.serialization.proto.IrClass.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(irClass_);
                irClass_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000001;
              break;
            }
            case 18: {
              org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.AuxTables.Builder subBuilder = null;
              if (((bitField0_ & 0x00000002) == 0x00000002)) {
                subBuilder = auxTables_.toBuilder();
              }
              auxTables_ = input.readMessage(org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.AuxTables.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(auxTables_);
                auxTables_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000002;
              break;
            }
          }
        }
      } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        try {
          unknownFieldsCodedOutput.flush();
        } catch (java.io.IOException e) {
        // Should not happen
        } finally {
          unknownFields = unknownFieldsOutput.toByteString();
        }
        makeExtensionsImmutable();
      }
    }
    public static org.jetbrains.kotlin.protobuf.Parser<JvmIrClass> PARSER =
        new org.jetbrains.kotlin.protobuf.AbstractParser<JvmIrClass>() {
      public JvmIrClass parsePartialFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        return new JvmIrClass(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public org.jetbrains.kotlin.protobuf.Parser<JvmIrClass> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int IR_CLASS_FIELD_NUMBER = 1;
    private org.jetbrains.kotlin.backend.common.serialization.proto.IrClass irClass_;
    /**
     * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.IrClass ir_class = 1;</code>
     */
    public boolean hasIrClass() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.IrClass ir_class = 1;</code>
     */
    public org.jetbrains.kotlin.backend.common.serialization.proto.IrClass getIrClass() {
      return irClass_;
    }

    public static final int AUX_TABLES_FIELD_NUMBER = 2;
    private org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.AuxTables auxTables_;
    /**
     * <code>required .org.jetbrains.kotlin.backend.jvm.serialization.proto.AuxTables aux_tables = 2;</code>
     */
    public boolean hasAuxTables() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required .org.jetbrains.kotlin.backend.jvm.serialization.proto.AuxTables aux_tables = 2;</code>
     */
    public org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.AuxTables getAuxTables() {
      return auxTables_;
    }

    private void initFields() {
      irClass_ = org.jetbrains.kotlin.backend.common.serialization.proto.IrClass.getDefaultInstance();
      auxTables_ = org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.AuxTables.getDefaultInstance();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasIrClass()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasAuxTables()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!getIrClass().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(org.jetbrains.kotlin.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeMessage(1, irClass_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeMessage(2, auxTables_);
      }
      output.writeRawBytes(unknownFields);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(1, irClass_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(2, auxTables_);
      }
      size += unknownFields.size();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.JvmIrClass parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.JvmIrClass parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.JvmIrClass parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.JvmIrClass parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.JvmIrClass parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.JvmIrClass parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.JvmIrClass parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.JvmIrClass parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.JvmIrClass parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.JvmIrClass parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.JvmIrClass prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    /**
     * Protobuf type {@code org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIrClass}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessageLite.Builder<
          org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.JvmIrClass, Builder>
        implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIrClass)
        org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.JvmIrClassOrBuilder {
      // Construct using org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.JvmIrClass.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private void maybeForceBuilderInitialization() {
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        irClass_ = org.jetbrains.kotlin.backend.common.serialization.proto.IrClass.getDefaultInstance();
        bitField0_ = (bitField0_ & ~0x00000001);
        auxTables_ = org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.AuxTables.getDefaultInstance();
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.JvmIrClass getDefaultInstanceForType() {
        return org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.JvmIrClass.getDefaultInstance();
      }

      public org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.JvmIrClass build() {
        org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.JvmIrClass result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.JvmIrClass buildPartial() {
        org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.JvmIrClass result = new org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.JvmIrClass(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.irClass_ = irClass_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.auxTables_ = auxTables_;
        result.bitField0_ = to_bitField0_;
        return result;
      }

      public Builder mergeFrom(org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.JvmIrClass other) {
        if (other == org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.JvmIrClass.getDefaultInstance()) return this;
        if (other.hasIrClass()) {
          mergeIrClass(other.getIrClass());
        }
        if (other.hasAuxTables()) {
          mergeAuxTables(other.getAuxTables());
        }
        setUnknownFields(
            getUnknownFields().concat(other.unknownFields));
        return this;
      }

      public final boolean isInitialized() {
        if (!hasIrClass()) {
          
          return false;
        }
        if (!hasAuxTables()) {
          
          return false;
        }
        if (!getIrClass().isInitialized()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.JvmIrClass parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.JvmIrClass) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private org.jetbrains.kotlin.backend.common.serialization.proto.IrClass irClass_ = org.jetbrains.kotlin.backend.common.serialization.proto.IrClass.getDefaultInstance();
      /**
       * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.IrClass ir_class = 1;</code>
       */
      public boolean hasIrClass() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.IrClass ir_class = 1;</code>
       */
      public org.jetbrains.kotlin.backend.common.serialization.proto.IrClass getIrClass() {
        return irClass_;
      }
      /**
       * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.IrClass ir_class = 1;</code>
       */
      public Builder setIrClass(org.jetbrains.kotlin.backend.common.serialization.proto.IrClass value) {
        if (value == null) {
          throw new NullPointerException();
        }
        irClass_ = value;

        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.IrClass ir_class = 1;</code>
       */
      public Builder setIrClass(
          org.jetbrains.kotlin.backend.common.serialization.proto.IrClass.Builder builderForValue) {
        irClass_ = builderForValue.build();

        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.IrClass ir_class = 1;</code>
       */
      public Builder mergeIrClass(org.jetbrains.kotlin.backend.common.serialization.proto.IrClass value) {
        if (((bitField0_ & 0x00000001) == 0x00000001) &&
            irClass_ != org.jetbrains.kotlin.backend.common.serialization.proto.IrClass.getDefaultInstance()) {
          irClass_ =
            org.jetbrains.kotlin.backend.common.serialization.proto.IrClass.newBuilder(irClass_).mergeFrom(value).buildPartial();
        } else {
          irClass_ = value;
        }

        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.IrClass ir_class = 1;</code>
       */
      public Builder clearIrClass() {
        irClass_ = org.jetbrains.kotlin.backend.common.serialization.proto.IrClass.getDefaultInstance();

        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }

      private org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.AuxTables auxTables_ = org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.AuxTables.getDefaultInstance();
      /**
       * <code>required .org.jetbrains.kotlin.backend.jvm.serialization.proto.AuxTables aux_tables = 2;</code>
       */
      public boolean hasAuxTables() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required .org.jetbrains.kotlin.backend.jvm.serialization.proto.AuxTables aux_tables = 2;</code>
       */
      public org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.AuxTables getAuxTables() {
        return auxTables_;
      }
      /**
       * <code>required .org.jetbrains.kotlin.backend.jvm.serialization.proto.AuxTables aux_tables = 2;</code>
       */
      public Builder setAuxTables(org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.AuxTables value) {
        if (value == null) {
          throw new NullPointerException();
        }
        auxTables_ = value;

        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.backend.jvm.serialization.proto.AuxTables aux_tables = 2;</code>
       */
      public Builder setAuxTables(
          org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.AuxTables.Builder builderForValue) {
        auxTables_ = builderForValue.build();

        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.backend.jvm.serialization.proto.AuxTables aux_tables = 2;</code>
       */
      public Builder mergeAuxTables(org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.AuxTables value) {
        if (((bitField0_ & 0x00000002) == 0x00000002) &&
            auxTables_ != org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.AuxTables.getDefaultInstance()) {
          auxTables_ =
            org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.AuxTables.newBuilder(auxTables_).mergeFrom(value).buildPartial();
        } else {
          auxTables_ = value;
        }

        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>required .org.jetbrains.kotlin.backend.jvm.serialization.proto.AuxTables aux_tables = 2;</code>
       */
      public Builder clearAuxTables() {
        auxTables_ = org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.AuxTables.getDefaultInstance();

        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIrClass)
    }

    static {
      defaultInstance = new JvmIrClass(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIrClass)
  }


  static {
  }

  // @@protoc_insertion_point(outer_class_scope)
}